"------------------------------------------------------------------------------------------------------------
" Plugins 
"------------------------------------------------------------------------------------------------------------

call plug#begin()

Plug 'preservim/nerdtree'

Plug 'preservim/nerdcommenter'

Plug 'vim-syntastic/syntastic'

Plug 'mileszs/ack.vim'

Plug 'dense-analysis/ale'

Plug 'frazrepo/vim-rainbow'

Plug 'morhetz/gruvbox'

Plug 'git@github.com:itchyny/lightline.vim.git'

Plug 'tpope/vim-fugitive'


Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'


call plug#end()


"------------------------------------------------------------------------------------------------------------
" Default behavior. 
"------------------------------------------------------------------------------------------------------------

" Set leader.
let mapleader=' '

" Enables syntax highlighting.
syntax on

" Enables filetype detection and indenting.
filetype plugin indent on

" Sets tab rules.
set expandtab
set tabstop=2
set shiftwidth=2
set smarttab
set ai
set si
set wrap

" Fold behavior at startup.
set foldlevelstart=20

" Always show current position.
set ruler

" Sets the number on the side of vim
set number

" Makes the backspace work as it should.
set backspace=indent,eol,start

" Set a line limit for files.
set colorcolumn=110

" Set mouse behavior.
set mouse=a

" Set searching behavior.
set ignorecase
set smartcase
set incsearch
set hlsearch
map <leader>w :noh <CR>

" Don't redraw durring macro execution.
set lazyredraw

" Display matching brackets.
set showmatch

" Add a small margin to the left.
set foldcolumn=1

" Always show the status line.
set laststatus=2

" Buffer settings in order to make the quickfix window open a new tab by
" default.
set switchbuf+=usetab,newtab

"------------------------------------------------------------------------------------------------------------
" Colors & Fonts
"------------------------------------------------------------------------------------------------------------

" Sets the background to dark scheme.
set t_Co=256
set background=dark

" Set color scheme.
color gruvbox 
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE


" Encoding.
set encoding=utf8

" Spell check
" set spell spelllang=en_us

"------------------------------------------------------------------------------------------------------------
" Plug-ins
"------------------------------------------------------------------------------------------------------------

" Set NERDTree mapping.
nmap <leader>nt :NERDTree<CR>

" Set lightline preferences.
let g:lightline = { 'colorscheme': 'one' }

" Set VimTex preferences
" let g:vimtex_view_general_viewer = 'okular'

" Set rainbow vim
au FileType c,cpp,cxx,h,hpp,py call rainbow#load()

let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']

" ALE linting and language server
let g:ale_set_ballons = 1
let g:ale_hover_cursor = 1

" Deoplete (syntax completion)
let g:deoplete#enable_at_startup = 1

"------------------------------------------------------------------------------------------------------------
" Functionalities
"------------------------------------------------------------------------------------------------------------

" Easily move from one tab to the other.
nmap <leader><Left> :tabp<CR>
nmap <leader><Right> :tabn<CR>

" For splitting windows and moving easily from one to the other.
nmap <leader>vs :vsplit
nmap <leader><leader><Left> <c-w><Left>
nmap <leader><leader><Right> <c-w><Right>
nmap <leader><leader><Up> <c-w><Up>
nmap <leader><leader><Down> <c-w><Down>

" For navigating the quickfix window
nmap <leader><leader>u :cprev<CR>
nmap <leader><leader>d :cnext<CR>
nmap <leader><leader>o :copen<CR>
nmap <leader><leader>c :cclose<CR>

" In document search mappings.
nnoremap // /<C-R><C-W>

" Grep search mappings.
nnoremap ,, :grep! -R "\b<C-R><C-W>\b" .<CR>:cw<CR>

" Make VIM remember position in file after reopen
 if has("autocmd")
   au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
